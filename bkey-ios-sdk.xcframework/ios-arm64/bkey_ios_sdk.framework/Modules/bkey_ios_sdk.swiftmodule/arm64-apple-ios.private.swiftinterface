// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target arm64-apple-ios16.1 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name bkey_ios_sdk
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import Combine
import CoreData
import CoreNFC
import CryptoKit
import CryptoKit/*.Digest*/
import CryptoKit/*.SHA256*/
import CryptoKit/*.SharedSecret*/
import Foundation
import Swift
import SwiftUI
import UIKit
import UniformTypeIdentifiers
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_exported import bkey_ios_sdk
import os.lock
import os

public enum NFCCardException : Swift.Error {
  case CardWasEmpty
  case FailedToReadCard(Swift.String)
  case FailedToScanCard(Swift.String)
  case FailedToWriteToCard(Swift.String)
  case OperationCanceled
}
public enum BkeyException : Swift.Error {
  case FrameworkNotInitialized
  case AccessNotAllowed
  case FrameworkError(Swift.String)
}

public enum CallbackType {
  case IdentityCreated
  case IdentityVerified
  public static func == (a: bkey_ios_sdk.CallbackType, b: bkey_ios_sdk.CallbackType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class Bkey {
  public static let shared: bkey_ios_sdk.Bkey
  @objc deinit
}
extension bkey_ios_sdk.Bkey {
  #if compiler(>=5.3) && $AsyncAwait
  public func Initialize(authToken: Swift.String, callback: @escaping (_ type: bkey_ios_sdk.CallbackType, _ userId: Swift.String, _ displayName: Swift.String, _ authToken: Swift.String) -> Swift.Void) async throws
  #endif
  public func CloseSession() throws
  public func Authenticate() -> some SwiftUI.View
  
  public func VerifyCurrentUserBiometrics(callback: @escaping (Swift.Bool) -> Swift.Void) -> some SwiftUI.View
  
  public func VerifyCurrentUserNfcCard() throws -> Swift.Bool
  public func SignString(value: Swift.String) throws -> Foundation.Data
  public func VerifyStringSignature(value: Swift.String, signature: Foundation.Data) throws -> Swift.Bool
  public func SignData(data: Foundation.Data) throws -> Foundation.Data
  public func VerifyDataSignature(data: Foundation.Data, signature: Foundation.Data) throws -> Swift.Bool
  public func EncryptString(value: Swift.String) throws -> Swift.String
  public func DecryptString(value: Swift.String) throws -> Swift.String
  public func EncryptData(data: Foundation.Data) throws -> [Swift.UInt8]
  public func DecryptData(data: Foundation.Data) throws -> [Swift.UInt8]
  public func GetCryptoSeedPhrase() throws
}
@inlinable internal func safeCompare<LHS, RHS>(_ lhs: LHS, _ rhs: RHS) -> Swift.Bool where LHS : Foundation.ContiguousBytes, RHS : Foundation.ContiguousBytes {
    lhs.withUnsafeBytes { lhsPtr in
        rhs.withUnsafeBytes { rhsPtr in
            constantTimeCompare(lhsPtr, rhsPtr)
        }
    }
}
@inlinable internal func constantTimeCompare<LHS, RHS>(_ lhs: LHS, _ rhs: RHS) -> Swift.Bool where LHS : Swift.Collection, RHS : Swift.Collection, LHS.Element == Swift.UInt8, RHS.Element == Swift.UInt8 {
    guard lhs.count == rhs.count else {
        return false
    }

    return zip(lhs, rhs).reduce(into: 0) { $0 |= $1.0 ^ $1.1 } == 0
}


extension Foundation.ContiguousBytes {
  @inlinable internal var bytes: [Swift.UInt8] {
    get {
		withUnsafeBytes { pointer in
			Array(pointer)
		}
	}
  }
}




extension SwiftUI.View {
  public func lazyPop(isEnabled: (SwiftUI.Binding<Swift.Bool>)? = nil) -> some SwiftUI.View
  
}

@_inheritsConvenienceInitializers @objc(PublicKey) public class PublicKey : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension bkey_ios_sdk.PublicKey {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<bkey_ios_sdk.PublicKey>
  @objc @NSManaged dynamic public var derkey: Foundation.Data? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var keyId: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var name: Swift.String? {
    @objc get
    @objc set
  }
}
extension bkey_ios_sdk.PublicKey : Swift.Identifiable {
  public typealias ID = Swift.ObjectIdentifier
}
extension bkey_ios_sdk.CallbackType : Swift.Equatable {}
extension bkey_ios_sdk.CallbackType : Swift.Hashable {}
