// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target arm64-apple-ios16.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name bkey_ios_sdk
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import Combine
import CoreData
import CoreNFC
import CryptoKit
import DeveloperToolsSupport
import Foundation
import Swift
import SwiftUI
import UIKit
import UniformTypeIdentifiers
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_exported import bkey_ios_sdk
import os.lock
import os
public enum NFCCardException : Swift.Error {
  case CardWasEmpty
  case FailedToReadCard(Swift.String)
  case FailedToScanCard(Swift.String)
  case FailedToWriteToCard(Swift.String)
  case OperationCanceled
}
public enum BkeyException : Swift.Error {
  case UserNotSet
  case FrameworkNotInitialized
  case AccessNotAllowed
  case EnrollmentFailed(Swift.String)
  case FrameworkError(Swift.String)
}
public let IDKEY_MODE_AUX_DATA: Swift.UInt16
public let IDKEY_MODE_FACE: Swift.UInt16
public let IDKEY_VENDOR_BKEYIF_0_1_0: Swift.UInt16
public let IDKEY_TYPE_NUMERIC: Swift.UInt16
public let IDKEY_TYPE_HEXUPPER: Swift.UInt16
public let IDKEY_TYPE_HEXLOWER: Swift.UInt16
public let IDKEY_TYPE_ALPHA_NUMERIC: Swift.UInt16
public let IDKEY_TYPE_SPECIAL_ALPHA_NUMERIC: Swift.UInt16
public let IDKEY_TYPE_CUSTOM_ALPHABET: Swift.UInt16
public let IDKEY_TYPE_PI_KEY: Swift.UInt16
public let IDKEY_TYPE_BIPS0039_KEYWORD: Swift.UInt16
public let IDKEY_TYPE_AES_KEY: Swift.UInt16
public let IDKEY_TYPE_RSA_PUBLIC_KEY: Swift.UInt16
public let IDKEY_TYPE_RSA_PRIVATE_KEY: Swift.UInt16
public let IDKEY_TYPE_EC_PUBLIC_KEY: Swift.UInt16
public let IDKEY_TYPE_EC_PRIVATE_KEY: Swift.UInt16
public let IDKEY_BIPS0032_PUBLIC_KEY_TYPE: Swift.UInt16
public let IDKEY_BIPS0032_PRIVATE_KEY_TYPE: Swift.UInt16
public let IDKEY_BIPS0032_KEY_PAIR_TYPE: Swift.UInt16
public let IDKEY_BIPS0032_P2PKH_ADDRESS: Swift.UInt16
public let IDKEY_BIP32_BINARY_FORMAT: Swift.UInt16
public let IDKEY_BIP32_BASE58_FORMAT: Swift.UInt16
public let IDKEY_ALPHABET_CHARACTER: Swift.UInt8
public let IDKEY_BIP0039_KEYWORD: Swift.UInt16
public let IDKEY_NO_BINDING: Swift.UInt16
public let IDKEY_BIP0039_12KEYWORDS: Swift.UInt16
public let IDKEY_BIP0039_15KEYWORDS: Swift.UInt16
public let IDKEY_BIP0039_18KEYWORDS: Swift.UInt16
public let IDKEY_BIP0039_21KEYWORDS: Swift.UInt16
public let IDKEY_BIP0039_24KEYWORDS: Swift.UInt16
public let IDKEY_MAX_NUM_AUX_KEYS: Swift.UInt16
public let IDKEY_NEW_BINDINGS: Swift.UInt16
public let IDKEY_APPEND_BINDINGS: Swift.UInt16
public let IDKEY_DELETE_BINDINGS: Swift.UInt16
public enum ModeData {
  case AuxData(auxType: Swift.UInt16, data: [Swift.UInt8])
  case FaceData(vendor: Swift.UInt16, numSamples: Swift.UInt8, features: [Swift.Float])
  public var description: Swift.String {
    get
  }
}


public enum CallbackType {
  case IdentityCreated
  case IdentityVerified
  public static func == (a: bkey_ios_sdk.CallbackType, b: bkey_ios_sdk.CallbackType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class BkeyPasskeyHelper {
  public static let shared: bkey_ios_sdk.BkeyPasskeyHelper
  @objc deinit
}
extension bkey_ios_sdk.BkeyPasskeyHelper {
  public func EncryptPasskey(publicKey: Foundation.Data, privKey: CryptoKit.P256.Signing.PrivateKey) throws -> [Swift.UInt8]
}
@_hasMissingDesignatedInitializers public class Bkey {
  public static let shared: bkey_ios_sdk.Bkey
  @objc deinit
}
extension bkey_ios_sdk.Bkey {
  #if compiler(>=5.3) && $AsyncAwait
  public func Initialize() async
  #endif
  public func CloseSession() throws
  public func CreateAccount(name: Swift.String, callback: @escaping (Swift.String, Swift.String) -> Swift.Void) -> some SwiftUI.View
  
  public func Login(identityId: Swift.String, callback: @escaping (Swift.String) -> Swift.Void) -> some SwiftUI.View
  
  public struct Identity {
  }
  public func GetPublicKey() throws -> [Swift.UInt8]
  public func GetIdentities() -> [bkey_ios_sdk.Bkey.Identity]
  public func SignString(value: Swift.String) throws -> Foundation.Data
  public func VerifyStringSignature(value: Swift.String, signature: Foundation.Data) throws -> Swift.Bool
  public func SignData(data: Foundation.Data) throws -> Foundation.Data
  public func VerifyDataSignature(data: Foundation.Data, signature: Foundation.Data) throws -> Swift.Bool
  public func EncryptString(value: Swift.String) throws -> Swift.String
  public func DecryptString(value: Swift.String) throws -> Swift.String
  public func EncryptData(data: Foundation.Data) throws -> [Swift.UInt8]
  public func DecryptData(data: Foundation.Data) throws -> [Swift.UInt8]
  #if compiler(>=5.3) && $AsyncAwait
  public func enableAccessMethod(methodId: Swift.String) async throws -> Swift.Bool
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func disableAccessMethod(methodId: Swift.String) async throws -> Swift.Bool
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func enrollForVideoVerification(lobbyId: Swift.String, clientId: Swift.String, entropy: Swift.String) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func RecoveryEnroll(numShares: Swift.UInt16, threshold: Swift.UInt16) async throws -> ([Swift.String], Swift.String, Swift.String)
  #endif
  public func GetRecoveryTemplateAndPIRef(recoveryId: Swift.String?, recoveryPassword: Swift.String?, includeFace: Swift.Bool = true, shares: [Swift.String], callback: @escaping ([Swift.UInt8], Swift.String) -> Swift.Void) -> some SwiftUI.View
  
  public struct RecoveredIdentity {
  }
  #if compiler(>=5.3) && $AsyncAwait
  public func Recover(identityId: Swift.String, keySeedDelta: Swift.String, recoveryTemplate: [Swift.UInt8]) async throws -> bkey_ios_sdk.Bkey.RecoveredIdentity
  #endif
}

extension SwiftUI.View {
  @inlinable public func reverseMask<Mask>(alignment: SwiftUI.Alignment = .center, @SwiftUI.ViewBuilder _ mask: () -> Mask) -> some SwiftUI.View where Mask : SwiftUI.View {
    self.mask {
      Rectangle()
        .overlay(alignment: alignment) {
          mask()
            .blendMode(.destinationOut)
        }
    }
  }
  
}



@_inheritsConvenienceInitializers @objc(PublicKey) public class PublicKey : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension bkey_ios_sdk.PublicKey {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<bkey_ios_sdk.PublicKey>
  @objc @NSManaged dynamic public var derkey: Foundation.Data? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var keyId: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var name: Swift.String? {
    @objc get
    @objc set
  }
}
extension bkey_ios_sdk.PublicKey : Swift.Identifiable {
  public typealias ID = Swift.ObjectIdentifier
}
extension bkey_ios_sdk.CallbackType : Swift.Equatable {}
extension bkey_ios_sdk.CallbackType : Swift.Hashable {}
