// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target arm64-apple-ios16.1 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name bkey_ios_sdk
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import Combine
import CoreData
import CoreNFC
import CryptoKit
import Foundation
import Swift
import SwiftUI
import UniformTypeIdentifiers
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_exported import bkey_ios_sdk
import os.lock
import os
public enum ThemeColorOptions {
  case Dark
  public static func == (a: bkey_ios_sdk.ThemeColorOptions, b: bkey_ios_sdk.ThemeColorOptions) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum ThemeFontOptions {
  case Lato
  public static func == (a: bkey_ios_sdk.ThemeFontOptions, b: bkey_ios_sdk.ThemeFontOptions) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum ThemeColor {
  case Black
  case Gray100
  case Gray200
  case Gray300
  case Gray400
  case Gray500
  case White
  case Red
  case Blue
  case Green
  case Yellow
  case Purple
  public static func == (a: bkey_ios_sdk.ThemeColor, b: bkey_ios_sdk.ThemeColor) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum ThemeFont {
  case Regular
  case Bold
  case Thin
  case Black
  case Light
  public static func == (a: bkey_ios_sdk.ThemeFont, b: bkey_ios_sdk.ThemeFont) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class Theme {
  public var themeOption: bkey_ios_sdk.ThemeColorOptions
  public var fontOption: bkey_ios_sdk.ThemeFontOptions
  public func GetFont(font: bkey_ios_sdk.ThemeFont, size: CoreFoundation.CGFloat) -> SwiftUI.Font
  public func GetColor(color: bkey_ios_sdk.ThemeColor) -> SwiftUI.Color
  @objc deinit
}
public enum NFCCardException : Swift.Error {
  case CardWasEmpty
  case FailedToReadCard(Swift.String)
  case FailedToScanCard(Swift.String)
  case FailedToWriteToCard(Swift.String)
  case OperationCanceled
}
public enum PermissionException : Swift.Error {
  case FrameworkNotInitialized
  case AccessNotAllowed
  public static func == (a: bkey_ios_sdk.PermissionException, b: bkey_ios_sdk.PermissionException) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public let bkey: bkey_ios_sdk.Bkey
@_hasMissingDesignatedInitializers public class Bkey {
  public static let shared: bkey_ios_sdk.Bkey
  @objc deinit
}
extension bkey_ios_sdk.Bkey {
  public func TestDisplay() -> some SwiftUI.View
  
  #if compiler(>=5.3) && $AsyncAwait
  public func Initialize(clientId: Swift.String, accessToken: Swift.String) async throws
  #endif
  public func Release() throws
  #if compiler(>=5.3) && $AsyncAwait
  public func RegisterBiometrics(accountName: Swift.String) async throws -> (Swift.String, [Swift.UInt8])
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func VerifyBiometrics(id: Swift.String, template: [Swift.UInt8]) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func ExternalImportAndVerify() async throws -> (Swift.String, [Swift.UInt8])
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func ExportTemplate() async throws
  #endif
  public func Sign() throws
  public func VerifySignature() throws
  public func Encrypt() throws
  public func Decrypt() throws
  public func GenerateSeedPhrase() throws
}
@_inheritsConvenienceInitializers @objc(PublicKey) public class PublicKey : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension bkey_ios_sdk.PublicKey {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<bkey_ios_sdk.PublicKey>
  @objc @NSManaged dynamic public var derkey: Foundation.Data? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var keyId: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var name: Swift.String? {
    @objc get
    @objc set
  }
}
extension bkey_ios_sdk.PublicKey : Swift.Identifiable {
  public typealias ID = Swift.ObjectIdentifier
}
extension bkey_ios_sdk.ThemeColorOptions : Swift.Equatable {}
extension bkey_ios_sdk.ThemeColorOptions : Swift.Hashable {}
extension bkey_ios_sdk.ThemeFontOptions : Swift.Equatable {}
extension bkey_ios_sdk.ThemeFontOptions : Swift.Hashable {}
extension bkey_ios_sdk.ThemeColor : Swift.Equatable {}
extension bkey_ios_sdk.ThemeColor : Swift.Hashable {}
extension bkey_ios_sdk.ThemeFont : Swift.Equatable {}
extension bkey_ios_sdk.ThemeFont : Swift.Hashable {}
extension bkey_ios_sdk.PermissionException : Swift.Equatable {}
extension bkey_ios_sdk.PermissionException : Swift.Hashable {}
