// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target arm64-apple-ios16.1 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name bkey_ios_sdk
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import Combine
import CoreData
import CoreNFC
import CryptoKit
import Foundation
import Swift
import SwiftUI
import UIKit
import UniformTypeIdentifiers
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_exported import bkey_ios_sdk
import os.lock
import os

public enum NFCCardException : Swift.Error {
  case CardWasEmpty
  case FailedToReadCard(Swift.String)
  case FailedToScanCard(Swift.String)
  case FailedToWriteToCard(Swift.String)
  case OperationCanceled
}
public enum BkeyException : Swift.Error {
  case FrameworkNotInitialized
  case AccessNotAllowed
  case FrameworkError(Swift.String)
}

public enum RegistrationResponse {
  case RegistrationFailed
  case RegistrationSuccess
  public static func == (a: bkey_ios_sdk.RegistrationResponse, b: bkey_ios_sdk.RegistrationResponse) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum VerificationResponse {
  case UserCanceled
  case UserDoesNotExist
  case UserVerificationFailed
  case UserVerified
  public static func == (a: bkey_ios_sdk.VerificationResponse, b: bkey_ios_sdk.VerificationResponse) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class Bkey {
  public static let shared: bkey_ios_sdk.Bkey
  public func OnIdentityCreated()
  public func OnIdentityVerified()
  @objc deinit
}
extension bkey_ios_sdk.Bkey {
  #if compiler(>=5.3) && $AsyncAwait
  public func Initialize(authToken: Swift.String) async throws
  #endif
  public func CloseSession() throws
  public func Authenticate() -> some SwiftUI.View
  
}





extension SwiftUI.View {
  public func lazyPop(isEnabled: (SwiftUI.Binding<Swift.Bool>)? = nil) -> some SwiftUI.View
  
}

@_inheritsConvenienceInitializers @objc(PublicKey) public class PublicKey : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension bkey_ios_sdk.PublicKey {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<bkey_ios_sdk.PublicKey>
  @objc @NSManaged dynamic public var derkey: Foundation.Data? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var keyId: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var name: Swift.String? {
    @objc get
    @objc set
  }
}
extension bkey_ios_sdk.PublicKey : Swift.Identifiable {
  public typealias ID = Swift.ObjectIdentifier
}
extension bkey_ios_sdk.RegistrationResponse : Swift.Equatable {}
extension bkey_ios_sdk.RegistrationResponse : Swift.Hashable {}
extension bkey_ios_sdk.VerificationResponse : Swift.Equatable {}
extension bkey_ios_sdk.VerificationResponse : Swift.Hashable {}
